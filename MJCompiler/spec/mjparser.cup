

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.test.CompilerError;
import rs.ac.bg.etf.pp1.test.CompilerError.CompilerErrorType;
import java.util.*;

parser code {:

	boolean errorDetected;
	List<CompilerError> errors = new LinkedList<>();;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      errors.addAll(((Yylex)this.getScanner()).getErrors());
      report_error(message, ((Symbol)info).left);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token.left);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token.left);
    }

    //public void report_error(String message) {
    	//errorDetected = true;
    	//StringBuilder msg = new StringBuilder(message); 
    	//if (info instanceof Symbol)
        //    msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        //errors.add(new CompilerError(line, message, CompilerErrorType.SYNTAX_ERROR));
    //}
    
    public void report_error(String msg, int line) {
        log.error("Greska na liniji " + line + ": " + msg.toString());
        errors.add(new CompilerError(line, msg, CompilerErrorType.SYNTAX_ERROR));
    }
    
    public List<CompilerError> getErrors() {
    	return errors;
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG,  PRINT, VOID, CONST, CLASS;
terminal SEMI, COMMA, EQUAL, PLUS;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal Integer NUM_CONST;
terminal String CHAR_CONST;
terminal String BOOL_CONST;
terminal String IDENT;
terminal String RETURN, BREAK, CONTINUE;
terminal IF, ELSE;
terminal WHILE, READ, NEW, ENUM, SWITCH, EXTENDS, CASE, YIELD, DEFAULT, DO;
terminal String COLON, GTE, LT, DOT, LTE, DIV, MINUS, MOD, MUL, GT, QUESTION, INC, NEQ, AND, EQ, OR, DEC;

nonterminal DeclarationsList;
nonterminal ConstDecl, ConstDeclList, ConstDeclElem;
nonterminal VarDecl, VarList, VarDeclList;
nonterminal ClassDecl, ClassMethods, Extends;
nonterminal MethodDecls, MethodParams;
nonterminal FormPars, ActPars, PossibleActPars;
nonterminal RepeatedDesignator, DesignatorStatement, DesignatorOptions;
nonterminal Assignop, Addop, Mulop;
nonterminal IfCondition;
nonterminal InitDoWhile, InitSwitch, InitOR, InitAND, NextOR, NextAND;
nonterminal InitThen, InitElse, AfterIf, SkipElse, EndDoWhile, InitIf, WhileConditionInit, InitYield;
nonterminal InitCase, InitDefaultCase;
nonterminal NegMinus;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, FuncDesignator, Designator, Var, Relop;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ElemAccess;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Terms, Term, Factor, Condition, CondTerm, CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Struct StatementList, Statement, CaseList, DefaultCase;

precedence left ELSE;

/* PROGRAM */
Program ::= (Program) PROG ProgName DeclarationsList LBRACE MethodDecls RBRACE
;

ProgName ::= (ProgName) IDENT:name
;

DeclarationsList ::= (ConstDeclarationsList) DeclarationsList ConstDecl
				|
				(VarDeclarationsList) DeclarationsList VarDecl
				|
				(ClassDeclarationsList) DeclarationsList ClassDecl
				|
				(NoDecls) /* epsilon */
				;

				
/* CONST DECL */
ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI
;

ConstDeclList ::= (ConstDeclarationList) ConstDeclList COMMA ConstDeclElem
				|
				(OneElemConstDeclList) ConstDeclElem
				;
				
ConstDeclElem ::= (NumConstDecl) IDENT:constName EQUAL NUM_CONST:constVal
			|
			(CharConstDecl) IDENT:constName EQUAL CHAR_CONST:constVal
			|
			(BoolConstDecl) IDENT:constName EQUAL BOOL_CONST:constVal
			;	


/* VAR DECL */
VarDecl ::= (VarDecl) Type:varType VarList SEMI;

VarDeclList ::= (VarDeclarationList) VarDeclList VarDecl
			|
			(NoVarDecls) /* epsilon */
			;

VarList ::= (VariableList) VarList COMMA Var
			|
			(OneElemVarList) Var
			;

Var ::= (ArrayDeclaration) IDENT:varName LSQUARE RSQUARE
		|
		(VarDeclaration) IDENT:varName 
		|
		(ErrorVar) error:e {: parser.report_error("Izvrsen oporavak od greske na linji " + eleft + ", pri deklerisanju globalne promenljive", eleft); :}
		;

			
/* CLASS DECL */
ClassDecl ::= (ClassDecl) CLASS IDENT:name Extends LBRACE VarDeclList ClassMethods RBRACE
;

Extends ::= (ClassExtends) EXTENDS Type
			|
			(NoExtends)
			;
			
ClassMethods ::= (ClassMethodsList) LBRACE MethodDecls RBRACE
			|
			(NoClassMethods)
			;

/* TYPE */
Type ::= (Type) IDENT:typeName;


/* METHOD DECL */
MethodDecls ::= (MethodDeclList) MethodDecls MethodDecl
			|
			(NoMethodDecls)
			;
			
MethodDecl ::= (MethodDecl) MethodTypeName MethodParams VarDeclList LBRACE StatementList RBRACE
			;
			
MethodTypeName ::= (NonVoidMethod) Type IDENT:name
				|
				(VoidMethod) VOID IDENT:name
;

MethodParams ::= (MethParams) LPAREN FormPars RPAREN
				|
				(NoParams) LPAREN RPAREN
				;

FormPars ::= (FormParsList) FormPars COMMA Type Var
			|
			(FormParsElem) Type Var
			|
			(FormParsError) error:e {: parser.report_error("Izvrsen oporavak od greske na liniji " + eleft + ", pri deklaraciji formalnog parametra funkcije", eleft); :}
			;

/* STATEMENTS */ 
StatementList ::= (StmtList) StatementList Statement
			 	| 
			 	(NoStmt) /* epsilon */
			 	;
			 	
Statement ::= (DesignatorStmt) DesignatorStatement /* SEMI moved to DesignatorStmt */
			|
			(IfStmt) InitIf LPAREN IfCondition RPAREN InitThen Statement AfterIf
			|
			(IfElseStmt) InitIf LPAREN IfCondition RPAREN InitThen Statement SkipElse InitElse Statement AfterIf
			|
			(DoWhileStmt) InitDoWhile DO Statement WHILE WhileConditionInit Condition RPAREN EndDoWhile
			|
			(YieldStmt) InitYield Expr SEMI
			|
			(BreakStmt) BREAK:b SEMI
			|
			(ContinueStmt) CONTINUE:c SEMI
			|
			(ReturnVoid) RETURN:ret SEMI
			|
			(ReturnStmt) RETURN Expr SEMI
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			|
			(PrintConstStmt) PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMI
			|
			(MoreStmts) LBRACE StatementList RBRACE
			;

InitYield ::= (InitYield) YIELD ;		
InitDoWhile ::= (InitDoWhile) ;
WhileConditionInit ::= (WhileConditionInit) LPAREN;
InitIf ::= (InitIf) IF ;
InitThen ::= (InitThen) ;
InitElse ::= (InitElse) ;
AfterIf ::= (AfterIf) ;
SkipElse ::= (SkipElse) ELSE;
EndDoWhile ::= (EndDoWhile) SEMI ;
			
/* EXPR */
Expr ::= (BasicTerms) Terms
		|
		(NegTerms) NegMinus Terms
		|
		(SwitchExpr) InitSwitch SWITCH LPAREN Expr RPAREN LBRACE CaseList DefaultCase RBRACE
		;
		
NegMinus ::= (NegMinus) MINUS;
		
InitSwitch ::= (InitSwitch) ;
					
CaseList ::= (Cases) CaseList InitCase COLON StatementList
			|
			(NoCase) /* epsilon */
			;

DefaultCase ::= (DefaultCase) InitDefaultCase COLON StatementList
;

InitCase ::= (InitCase) CASE NUM_CONST:num;
InitDefaultCase ::= (InitDefaultCase) DEFAULT ;
		
/* TERM */
Terms ::= (TermList) Terms Addop Term
		|
		(OneTerm) Term
		;
		
Term ::= (FactorList) Term Mulop Factor
		|
		(OneFactor) Factor
		;
		
/* FACTOR */
Factor ::= (DesignatorFactor) Designator
		|
		(DesignatorFactorActPars) FuncDesignator PossibleActPars
		|
		(NumFactor) NUM_CONST:num
		|
		(CharFactor) CHAR_CONST:ch
		|
		(BoolFactor) BOOL_CONST:bool
		|
		(NewFactor) NEW Type
		|
		(NewFactorArray) NEW Type LSQUARE Expr RSQUARE
		|
		(ExprFactor) LPAREN Expr RPAREN
		;
			
/* DESIGNATOR */

DesignatorStatement ::= (Assignement) Designator Assignop Expr SEMI
					|
					(ErrorAssigning) error:e 
					{: parser.report_error("Izvrsen oporavak od greske na liniji " + eleft + ", kod konstrukcije iskaza dodele", eleft); :}
					|
					(DesignatorActPars) FuncDesignator PossibleActPars SEMI
					|
					(Increase) Designator INC SEMI
					|
					(Decrease) Designator DEC SEMI
					;
					
FuncDesignator ::= (FuncDesignator) Designator;
		
Designator ::= (DesignatorJustIdent) IDENT:name
				|
				(DesignatorWithExpr) ElemAccess LSQUARE Expr RSQUARE
;

ElemAccess ::= (ElemAccess) IDENT:name;
					
/* ACT PARS */
ActPars ::= (ActParsList) ActPars COMMA Expr
		|
		(OneExpr) Expr
		;
		
PossibleActPars ::= (WithActPars) LPAREN ActPars RPAREN 
					|
					(WithoutActPars) LPAREN RPAREN 
					;
/* "(" [ActPars] ")" */
		

/* CONDITION */
IfCondition ::= (IfCond) Condition
			|
			(IfError) error:e {:  parser.report_error("Izvrsen oporavak od greske na liniji " + eleft + ", kod logickog izraza unutar if konstrukcije", eleft); :}
			;

Condition ::= (CondTerms) InitOR OR NextOR
			|
			(OneCondTerm) CondTerm
			;
			
InitOR ::= (InitOR) Condition;
NextOR ::= (NextOR) CondTerm ;
			
CondTerm ::= (CondFacts) InitAND AND NextAND
			|
			(OneCondFact) CondFact
			;
			
InitAND ::= (InitAND) CondTerm;
NextAND ::= (NextAND) CondFact;
			
CondFact ::= (CondFact1Expr) Expr
			|
			(CondFact2Expr) Expr Relop Expr
			;
			
/* OPERATIONS */
Assignop ::= (Assignop) EQUAL:eq
;

Relop ::= (Equal) EQ:eq 
		|
		(NotEqual) NEQ 
		| 
		(GreaterThen) GT:gt
		|
		(GreaterThenEqual) GTE:gte
		|
		(LessThen) LT:lt
		|
		(LessThenEqual) LTE:lte
;

Addop ::= (Plus) PLUS:plus
		|
		(Minus) MINUS:minus
;

Mulop ::= (Mul) MUL:mul
		|
		(Div) DIV:div
		|
		(Mod) MOD:mod
;

			